#region COPYRIGHT
// (c)2012 MuchDifferent. All Rights Reserved.
#endregion
using System.Globalization;

// WARNING: The following code is auto generated by a text template and may be overwritten at any time.

namespace uLink
{
	public static partial class NetworkPrefs
	{
		public static int GetInt(string key, int defaultValue)
		{
			int value;
			return _TryParse(GetString(key), out value) ? value : defaultValue;
		}

		public static bool TryGetInt(string key, ref int value)
		{
			int keyValue;
			if (_TryParse(GetString(key), out keyValue))
			{
				value = keyValue;
				return true;
			}
			
			return false;
		}

		public static void SetInt(string key, int value)
		{
			SetString(key, value.ToString());
		}

		public static int Get(string key, int defaultValue) { return GetInt(key, defaultValue); }

		public static bool TryGet(string key, ref int value) { return TryGetInt(key, ref value); }

		public static void Set(string key, int value) { SetInt(key, value); }

		private static bool _TryParse(string s, out int result)
		{
			return int.TryParse(s, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
		}

		public static uint GetUInt(string key, uint defaultValue)
		{
			uint value;
			return _TryParse(GetString(key), out value) ? value : defaultValue;
		}

		public static bool TryGetUInt(string key, ref uint value)
		{
			uint keyValue;
			if (_TryParse(GetString(key), out keyValue))
			{
				value = keyValue;
				return true;
			}
			
			return false;
		}

		public static void SetUInt(string key, uint value)
		{
			SetString(key, value.ToString());
		}

		public static uint Get(string key, uint defaultValue) { return GetUInt(key, defaultValue); }

		public static bool TryGet(string key, ref uint value) { return TryGetUInt(key, ref value); }

		public static void Set(string key, uint value) { SetUInt(key, value); }

		private static bool _TryParse(string s, out uint result)
		{
			return uint.TryParse(s, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
		}

		public static long GetLong(string key, long defaultValue)
		{
			long value;
			return _TryParse(GetString(key), out value) ? value : defaultValue;
		}

		public static bool TryGetLong(string key, ref long value)
		{
			long keyValue;
			if (_TryParse(GetString(key), out keyValue))
			{
				value = keyValue;
				return true;
			}
			
			return false;
		}

		public static void SetLong(string key, long value)
		{
			SetString(key, value.ToString());
		}

		public static long Get(string key, long defaultValue) { return GetLong(key, defaultValue); }

		public static bool TryGet(string key, ref long value) { return TryGetLong(key, ref value); }

		public static void Set(string key, long value) { SetLong(key, value); }

		private static bool _TryParse(string s, out long result)
		{
			return long.TryParse(s, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
		}

		public static ulong GetULong(string key, ulong defaultValue)
		{
			ulong value;
			return _TryParse(GetString(key), out value) ? value : defaultValue;
		}

		public static bool TryGetULong(string key, ref ulong value)
		{
			ulong keyValue;
			if (_TryParse(GetString(key), out keyValue))
			{
				value = keyValue;
				return true;
			}
			
			return false;
		}

		public static void SetULong(string key, ulong value)
		{
			SetString(key, value.ToString());
		}

		public static ulong Get(string key, ulong defaultValue) { return GetULong(key, defaultValue); }

		public static bool TryGet(string key, ref ulong value) { return TryGetULong(key, ref value); }

		public static void Set(string key, ulong value) { SetULong(key, value); }

		private static bool _TryParse(string s, out ulong result)
		{
			return ulong.TryParse(s, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
		}

		public static bool GetBool(string key, bool defaultValue)
		{
			bool value;
			return _TryParse(GetString(key), out value) ? value : defaultValue;
		}

		public static bool TryGetBool(string key, ref bool value)
		{
			bool keyValue;
			if (_TryParse(GetString(key), out keyValue))
			{
				value = keyValue;
				return true;
			}
			
			return false;
		}

		public static void SetBool(string key, bool value)
		{
			SetString(key, value.ToString());
		}

		public static bool Get(string key, bool defaultValue) { return GetBool(key, defaultValue); }

		public static bool TryGet(string key, ref bool value) { return TryGetBool(key, ref value); }

		public static void Set(string key, bool value) { SetBool(key, value); }

		private static bool _TryParse(string s, out bool result)
		{
			return bool.TryParse(s, out result);
		}

		public static float GetFloat(string key, float defaultValue)
		{
			float value;
			return _TryParse(GetString(key), out value) ? value : defaultValue;
		}

		public static bool TryGetFloat(string key, ref float value)
		{
			float keyValue;
			if (_TryParse(GetString(key), out keyValue))
			{
				value = keyValue;
				return true;
			}
			
			return false;
		}

		public static void SetFloat(string key, float value)
		{
			SetString(key, value.ToString());
		}

		public static float Get(string key, float defaultValue) { return GetFloat(key, defaultValue); }

		public static bool TryGet(string key, ref float value) { return TryGetFloat(key, ref value); }

		public static void Set(string key, float value) { SetFloat(key, value); }

		private static bool _TryParse(string s, out float result)
		{
			return float.TryParse(s, NumberStyles.Float | NumberStyles.AllowThousands, NumberFormatInfo.InvariantInfo, out result);
		}

		public static double GetDouble(string key, double defaultValue)
		{
			double value;
			return _TryParse(GetString(key), out value) ? value : defaultValue;
		}

		public static bool TryGetDouble(string key, ref double value)
		{
			double keyValue;
			if (_TryParse(GetString(key), out keyValue))
			{
				value = keyValue;
				return true;
			}
			
			return false;
		}

		public static void SetDouble(string key, double value)
		{
			SetString(key, value.ToString());
		}

		public static double Get(string key, double defaultValue) { return GetDouble(key, defaultValue); }

		public static bool TryGet(string key, ref double value) { return TryGetDouble(key, ref value); }

		public static void Set(string key, double value) { SetDouble(key, value); }

		private static bool _TryParse(string s, out double result)
		{
			return double.TryParse(s, NumberStyles.Float | NumberStyles.AllowThousands, NumberFormatInfo.InvariantInfo, out result);
		}

	}
}
